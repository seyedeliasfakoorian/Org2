name: Config and Scan
on: [push]
run-name: ${{ github.actor }} is Configuring and Scanning üöÄ
jobs:
  Fix-Heroku-Issues:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Install Heroku CLI
        run: |
          sudo npm install -g heroku
          heroku plugins:install heroku-builds
      - name: Reduce Vulnerabilities
        run: yarn audit
      - name: Login and Access to Heroku Container
        run: |
          heroku login -i
          heroku git:remote -a website-breaker-demo
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      - name: Create Pull Request
        run: |
        HEROKU_APP_NAME="website-breaker-demo"
        
        # Placeholder for logic to determine if Heroku needs to check logs
        # For example, you can use the Heroku API to check the status of the last deployment
        HEROKU_STATUS=$(heroku releases -n 1 --json --app $HEROKU_APP_NAME | jq -r '.[0].status')
        echo "Heroku Status: $HEROKU_STATUS"
        
        if [ "$HEROKU_STATUS" == "failed" ]; then
          echo "‚ùå Heroku deployment failed. Creating a pull request for checking logs."
          
          # Create a pull request
          PR_TITLE="Fix Heroku Vulnerabilities"
          PR_BODY="This pull request was automatically generated to trigger Heroku to check logs.üöÄ\nüåé [View Site](https://$HEROKU_APP_NAME.herokuapp.com/)"
          
          hub pull-request -m "$PR_TITLE" -b main -h github-actions -m "$PR_BODY"
        else
          echo "‚úÖ Heroku deployment successful."
        fi
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            echo "‚úÖ Heroku deployment successful."
          fi
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
